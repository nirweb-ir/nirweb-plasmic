/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mWGTsnJ5dVA6mVazezmiar
// Component: NCqvktgE7aSR

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: eh3S0_fLZiak/component
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import TextField from "../../TextField"; // plasmic-import: oWqoBH6of7PW/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: mWGTsnJ5dVA6mVazezmiar/projectcss
import sty from "./PlasmicFormsOtpCode.module.css"; // plasmic-import: NCqvktgE7aSR/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: hnbf41yXloGb/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: 0O6RzVMxlk8J/icon

createPlasmicElementProxy;

export type PlasmicFormsOtpCode__VariantMembers = {};
export type PlasmicFormsOtpCode__VariantsArgs = {};
type VariantPropType = keyof PlasmicFormsOtpCode__VariantsArgs;
export const PlasmicFormsOtpCode__VariantProps = new Array<VariantPropType>();

export type PlasmicFormsOtpCode__ArgsType = {
  phoneNumber?: string;
  onPhoneNumberChange?: () => void;
};
type ArgPropType = keyof PlasmicFormsOtpCode__ArgsType;
export const PlasmicFormsOtpCode__ArgProps = new Array<ArgPropType>(
  "phoneNumber",
  "onPhoneNumberChange"
);

export type PlasmicFormsOtpCode__OverridesType = {
  root?: Flex__<"div">;
  timer?: Flex__<typeof Timer>;
  span?: Flex__<"span">;
  textField?: Flex__<typeof TextField>;
};

export interface DefaultFormsOtpCodeProps {
  phoneNumber?: string;
  onPhoneNumberChange?: () => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFormsOtpCode__RenderFunc(props: {
  variants: PlasmicFormsOtpCode__VariantsArgs;
  args: PlasmicFormsOtpCode__ArgsType;
  overrides: PlasmicFormsOtpCode__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textField.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "timer",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 60
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__ms7JL)}>
        <Button
          className={classNames("__wab_instance", sty.button__zn0P0)}
          label={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jYbid
              )}
            >
              {
                "\u062a\u063a\u06cc\u06cc\u0631 \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
              }
            </div>
          }
          onClick={async event => {
            const $steps = {};

            $steps["runOnPhoneNumberChange"] = true
              ? (() => {
                  const actionArgs = {
                    eventRef: $props["onPhoneNumberChange"]
                  };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runOnPhoneNumberChange"] != null &&
              typeof $steps["runOnPhoneNumberChange"] === "object" &&
              typeof $steps["runOnPhoneNumberChange"].then === "function"
            ) {
              $steps["runOnPhoneNumberChange"] = await $steps[
                "runOnPhoneNumberChange"
              ];
            }
          }}
          size={"small"}
          type={"soft"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__r17FE
          )}
        >
          {"\u0648\u0631\u0648\u062f \u067e\u0632\u0634\u06a9"}
        </div>
      </div>
      <Timer
        data-plasmic-name={"timer"}
        data-plasmic-override={overrides.timer}
        className={classNames("__wab_instance", sty.timer)}
        intervalSeconds={1}
        isRunning={true}
        onTick={async () => {
          const $steps = {};

          $steps["updateTimer"] =
            $state.timer > 0
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["timer"]
                    },
                    operation: 3
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    const oldValue = $stateGet(objRoot, variablePath);
                    $stateSet(objRoot, variablePath, oldValue - 1);
                    return oldValue - 1;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["updateTimer"] != null &&
            typeof $steps["updateTimer"] === "object" &&
            typeof $steps["updateTimer"].then === "function"
          ) {
            $steps["updateTimer"] = await $steps["updateTimer"];
          }
        }}
        runWhileEditing={true}
      />

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__g8P1K
        )}
      >
        <React.Fragment>
          <React.Fragment>
            {
              "\u06a9\u062f \u0627\u0631\u0633\u0627\u0644 \u0634\u062f\u0647 \u0628\u0647 \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 "
            }
          </React.Fragment>
          {
            <span
              data-plasmic-name={"span"}
              data-plasmic-override={overrides.span}
              className={classNames(
                projectcss.all,
                projectcss.span,
                projectcss.__wab_text,
                projectcss.plasmic_default__inline,
                sty.span
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.phoneNumber;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "-";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </span>
          }
          <React.Fragment>
            {" \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."}
          </React.Fragment>
        </React.Fragment>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__ashll)}>
        <TextField
          data-plasmic-name={"textField"}
          data-plasmic-override={overrides.textField}
          className={classNames("__wab_instance", sty.textField)}
          label={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__q9Rb
              )}
            >
              {"\u06a9\u062f"}
            </div>
          }
          onChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["textField", "value"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          value={generateStateValueProp($state, ["textField", "value"])}
        />

        {(() => {
          try {
            return $state.timer > 0;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wLdZy
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return "0:" + $state.timer;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        ) : null}
        {(() => {
          try {
            return $state.timer == 0;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__bo2O8
            )}
            onClick={async event => {
              const $steps = {};

              $steps["updateTimer"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["timer"]
                      },
                      operation: 0,
                      value: 60
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateTimer"] != null &&
                typeof $steps["updateTimer"] === "object" &&
                typeof $steps["updateTimer"].then === "function"
              ) {
                $steps["updateTimer"] = await $steps["updateTimer"];
              }
            }}
          >
            {"\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f"}
          </div>
        ) : null}
      </div>
      <Button
        className={classNames("__wab_instance", sty.button__fxqoL)}
        label={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__r5DrS
            )}
          >
            {"\u0648\u0631\u0648\u062f"}
          </div>
        }
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "timer", "span", "textField"],
  timer: ["timer"],
  span: ["span"],
  textField: ["textField"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  timer: typeof Timer;
  span: "span";
  textField: typeof TextField;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFormsOtpCode__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFormsOtpCode__VariantsArgs;
    args?: PlasmicFormsOtpCode__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFormsOtpCode__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFormsOtpCode__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFormsOtpCode__ArgProps,
          internalVariantPropNames: PlasmicFormsOtpCode__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFormsOtpCode__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFormsOtpCode";
  } else {
    func.displayName = `PlasmicFormsOtpCode.${nodeName}`;
  }
  return func;
}

export const PlasmicFormsOtpCode = Object.assign(
  // Top-level PlasmicFormsOtpCode renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    timer: makeNodeComponent("timer"),
    span: makeNodeComponent("span"),
    textField: makeNodeComponent("textField"),

    // Metadata about props expected for PlasmicFormsOtpCode
    internalVariantProps: PlasmicFormsOtpCode__VariantProps,
    internalArgProps: PlasmicFormsOtpCode__ArgProps
  }
);

export default PlasmicFormsOtpCode;
/* prettier-ignore-end */
