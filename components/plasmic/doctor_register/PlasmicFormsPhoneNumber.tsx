/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mWGTsnJ5dVA6mVazezmiar
// Component: -5-QmUqVAHnf

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextField from "../../TextField"; // plasmic-import: oWqoBH6of7PW/component
import Button from "../../Button"; // plasmic-import: eh3S0_fLZiak/component
import ToolsSeparator from "../../ToolsSeparator"; // plasmic-import: hwxqgvQRlsoy/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: mWGTsnJ5dVA6mVazezmiar/projectcss
import sty from "./PlasmicFormsPhoneNumber.module.css"; // plasmic-import: -5-QmUqVAHnf/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: hnbf41yXloGb/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: 0O6RzVMxlk8J/icon

createPlasmicElementProxy;

export type PlasmicFormsPhoneNumber__VariantMembers = {};
export type PlasmicFormsPhoneNumber__VariantsArgs = {};
type VariantPropType = keyof PlasmicFormsPhoneNumber__VariantsArgs;
export const PlasmicFormsPhoneNumber__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFormsPhoneNumber__ArgsType = {
  onPhoneNumberValueChange?: (val: string) => void;
  onLogin?: () => void;
};
type ArgPropType = keyof PlasmicFormsPhoneNumber__ArgsType;
export const PlasmicFormsPhoneNumber__ArgProps = new Array<ArgPropType>(
  "onPhoneNumberValueChange",
  "onLogin"
);

export type PlasmicFormsPhoneNumber__OverridesType = {
  root?: Flex__<"div">;
  phoneNumberFiled?: Flex__<typeof TextField>;
  toolsSeparator?: Flex__<typeof ToolsSeparator>;
};

export interface DefaultFormsPhoneNumberProps {
  onPhoneNumberValueChange?: (val: string) => void;
  onLogin?: () => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFormsPhoneNumber__RenderFunc(props: {
  variants: PlasmicFormsPhoneNumber__VariantsArgs;
  args: PlasmicFormsPhoneNumber__ArgsType;
  overrides: PlasmicFormsPhoneNumber__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "phoneNumberFiled.value",
        type: "readonly",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onChangeProp: "onPhoneNumberValueChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__qmi7R
        )}
      >
        {
          "\u0648\u0631\u0648\u062f/\u062b\u0628\u062a \u0646\u0627\u0645 \u067e\u0632\u0634\u06a9\u0627\u0646"
        }
      </div>
      <TextField
        data-plasmic-name={"phoneNumberFiled"}
        data-plasmic-override={overrides.phoneNumberFiled}
        className={classNames("__wab_instance", sty.phoneNumberFiled)}
        label={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jgeSs
            )}
          >
            {
              "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
            }
          </div>
        }
        onChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "phoneNumberFiled",
            "value"
          ]).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        value={generateStateValueProp($state, ["phoneNumberFiled", "value"])}
      />

      <Button
        className={classNames("__wab_instance", sty.button__fp9Lw)}
        disabled={(() => {
          try {
            return !$state.phoneNumberFiled.value;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()}
        label={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__gVsYk
            )}
          >
            {"\u0648\u0631\u0648\u062f/\u062b\u0628\u062a \u0646\u0627\u0645"}
          </div>
        }
        onClick={async event => {
          const $steps = {};

          $steps["runOnLogin"] = /^(?:(?:\+|00)98|0)?9\d{9}$/.test(
            $state.phoneNumberFiled.value
          )
            ? (() => {
                const actionArgs = { eventRef: $props["onLogin"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runOnLogin"] != null &&
            typeof $steps["runOnLogin"] === "object" &&
            typeof $steps["runOnLogin"].then === "function"
          ) {
            $steps["runOnLogin"] = await $steps["runOnLogin"];
          }

          $steps["runCode"] = !/^(?:(?:\+|00)98|0)?9\d{9}$/.test(
            $state.phoneNumberFiled.value
          )
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return alert("شماره موبایل اشتباه است.");
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }
        }}
      />

      <ToolsSeparator
        data-plasmic-name={"toolsSeparator"}
        data-plasmic-override={overrides.toolsSeparator}
        className={classNames("__wab_instance", sty.toolsSeparator)}
        text={"\u06cc\u0627"}
      />

      <Button
        className={classNames("__wab_instance", sty.button__xx4D)}
        label={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__bBz04
            )}
          >
            {
              "\u0648\u0631\u0648\u062f \u0628\u0627 \u0628\u06cc\u0645\u0647 \u0633\u0644\u0627\u0645\u062a"
            }
          </div>
        }
        type={"bordered"}
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "phoneNumberFiled", "toolsSeparator"],
  phoneNumberFiled: ["phoneNumberFiled"],
  toolsSeparator: ["toolsSeparator"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  phoneNumberFiled: typeof TextField;
  toolsSeparator: typeof ToolsSeparator;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFormsPhoneNumber__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFormsPhoneNumber__VariantsArgs;
    args?: PlasmicFormsPhoneNumber__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFormsPhoneNumber__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFormsPhoneNumber__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFormsPhoneNumber__ArgProps,
          internalVariantPropNames: PlasmicFormsPhoneNumber__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFormsPhoneNumber__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFormsPhoneNumber";
  } else {
    func.displayName = `PlasmicFormsPhoneNumber.${nodeName}`;
  }
  return func;
}

export const PlasmicFormsPhoneNumber = Object.assign(
  // Top-level PlasmicFormsPhoneNumber renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    phoneNumberFiled: makeNodeComponent("phoneNumberFiled"),
    toolsSeparator: makeNodeComponent("toolsSeparator"),

    // Metadata about props expected for PlasmicFormsPhoneNumber
    internalVariantProps: PlasmicFormsPhoneNumber__VariantProps,
    internalArgProps: PlasmicFormsPhoneNumber__ArgProps
  }
);

export default PlasmicFormsPhoneNumber;
/* prettier-ignore-end */
